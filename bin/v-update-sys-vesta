#!/bin/bash
# info: update vesta package/configs
# options: PACKAGE [VERSION]
#
# The function runs as rpm update trigger. It pulls shell script from vesta
# server and runs it.


#----------------------------------------------------------#
#                    Variable&Function                     #
#----------------------------------------------------------#

# Argument defenition
package=$1

# Importing system enviroment
source /etc/profile

# Includes
source $VESTA/func/main.sh
source $VESTA/conf/vesta.conf


#----------------------------------------------------------#
#                    Verifications                         #
#----------------------------------------------------------#

# Checking arg number
check_args '1' "$#" 'PACKAGE'


#----------------------------------------------------------#
#                       Action                             #
#----------------------------------------------------------#


# Remove upd_flag
rm -f $VESTA/web/.update

# Create tmp file
tmp_file=$(mktemp)

# Check latest version
wget -q -T 1 -t 1  http://c.vestacp.com/latest.txt -O $tmp_file

# Check vesta version
if [ -e "/etc/redhat-release" ]; then
    rpm_format="VERSION='%{VERSION}'"
    rpm_format="$rpm_format RELEASE='%{RELEASE}'"
    rpm_format="$rpm_format ARCH='%{ARCH}'"
    rpm_format="$rpm_format UTIME='%{INSTALLTIME}'\n"
    eval $(rpm --queryformat="$rpm_format" -q $package)
    DATE=$(date -d @$UTIME +%F)
    TIME=$(date -d @$UTIME +%T)
else
    dpkg_data=$(dpkg-query -s $package)
    pkg_date=$(stat -c "%Y" /var/lib/dpkg/info/$package.list)
    ARCH=$(echo "$dpkg_data"|grep Architecture | cut -f 2 -d ' ')
    VERSION=$(echo "$dpkg_data"|grep Version |cut -f 2 -d ' '|cut -f 1 -d \-)
    RELEASE=$(echo "$dpkg_data"|grep Version |cut -f 2 -d ' '|cut -f 2 -d \-)
    DATE=$(date -d @$pkg_date +"%F")
    TIME=$(date -d @$pkg_date +"%T")
fi
checkvar='vesta'
if[ "$package" == "vesta-php"]; then
	checkvar='php'
fi
if[ "$package" == "vesta-nginx"]; then
	checkvar='nginx'
fi

latest=$(grep $checkvar $tmp_file)
UPDATED='yes'
if [ ! -z "$latest" ] && [ "$latest" != "$checkvar-$VERSION-$RELEASE" ]; then
    UPDATED='no'
    set_upd_flag='yes'
fi

# Create flag if updates avaiable
if [ "$set_upd_flag" == 'yes' ]; then
    touch $VESTA/web/.update
    chmod a+r $VESTA/web/.update
fi




if [ "$UPDATED" == 'no' ]; then
	if [ -e "/etc/redhat-release" ]; then
		# Clean yum chache
		yum -q clean all

		# Define yum cmd
		yum="yum -q -y --noplugins --disablerepo=* --enablerepo=vesta"

		# Update vesta package
		$yum update $package > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			echo "Error: $package update failed"
			log_event "$E_UPDATE" "$EVENT"
			exit $E_UPDATE
		fi
	else
		# Update repo
		apt-get update -o Dir::Etc::sourcelist="sources.list.d/vesta.list" \
			-o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0" -qq

		# Update vesta package
		apt-get install $package -qq > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			echo "Error: $package update failed"
			log_event "$E_UPDATE" "$EVENT"
			exit $E_UPDATE
		fi
	fi
fi


#----------------------------------------------------------#
#                       Vesta                              #
#----------------------------------------------------------#

# Logging
log_event "$OK" "$EVENT"

exit
